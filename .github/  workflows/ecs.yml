name: Deploy to ECS and Apply Terraform

on:
  workflow_run:
    workflows: ["Deploy to ECS"]  # The name of the ecr.yml workflow
    types:
      - completed 

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      # Step 3: Terraform Init and Apply
      - name: Terraform Init and Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

  ecs-deploy:
    runs-on: ubuntu-latest
    needs: terraform
    environment: production

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ap-south-1

      # Step 3: Deploy Docker Image to ECS using the latest ECR image
      - name: Deploy to ECS
        run: |
          # Login to ECR
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 864899875002.dkr.ecr.ap-south-1.amazonaws.com

          # Pull the image from ECR
          docker pull 864899875002.dkr.ecr.ap-south-1.amazonaws.com/strapi-app-repo:latest

          # Update ECS service
          ecs-cli configure --cluster strapi-app-cluster --region ap-south-1
          ecs-cli compose --file docker-compose.yml up
          
          # Optional: Terraform output if needed
          terraform output
          
          # Restart the ECS service (optional step if manual ECS service restart is needed)
          aws ecs update-service --cluster strapi-app-cluster --service strapi-app-service --force-new-deployment
